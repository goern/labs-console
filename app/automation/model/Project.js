/**
 * Red Hat Open Innovation Labs API
 * A generic model to support automation at all levels of the application and infrastructure lifecycle.
 *
 * OpenAPI spec version: 0.3.0-alpha
 * Contact: rhc-open-innovation-labs@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Application', 'model/GroupRoleMapping', 'model/PersistentVolumeClaim', 'model/RoleMapping'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Application'), require('./GroupRoleMapping'), require('./PersistentVolumeClaim'), require('./RoleMapping'));
  } else {
    // Browser globals (root is window)
    if (!root.RedHatOpenInnovationLabsApi) {
      root.RedHatOpenInnovationLabsApi = {};
    }
    root.RedHatOpenInnovationLabsApi.Project = factory(root.RedHatOpenInnovationLabsApi.ApiClient, root.RedHatOpenInnovationLabsApi.Application, root.RedHatOpenInnovationLabsApi.GroupRoleMapping, root.RedHatOpenInnovationLabsApi.PersistentVolumeClaim, root.RedHatOpenInnovationLabsApi.RoleMapping);
  }
}(this, function(ApiClient, Application, GroupRoleMapping, PersistentVolumeClaim, RoleMapping) {
  'use strict';




  /**
   * The Project model module.
   * @module model/Project
   * @version 0.3.0-alpha
   */

  /**
   * Constructs a new <code>Project</code>.
   * @alias module:model/Project
   * @class
   * @param name {String} 
   */
  var exports = function(name) {
    var _this = this;



    _this['name'] = name;





  };

  /**
   * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Project} obj Optional instance to populate.
   * @return {module:model/Project} The populated <code>Project</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('display_name')) {
        obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('environment_type')) {
        obj['environment_type'] = ApiClient.convertToType(data['environment_type'], 'String');
      }
      if (data.hasOwnProperty('apps')) {
        obj['apps'] = ApiClient.convertToType(data['apps'], [Application]);
      }
      if (data.hasOwnProperty('group_to_role')) {
        obj['group_to_role'] = ApiClient.convertToType(data['group_to_role'], [GroupRoleMapping]);
      }
      if (data.hasOwnProperty('user_to_role')) {
        obj['user_to_role'] = ApiClient.convertToType(data['user_to_role'], [RoleMapping]);
      }
      if (data.hasOwnProperty('persistent_volume_claims')) {
        obj['persistent_volume_claims'] = ApiClient.convertToType(data['persistent_volume_claims'], [PersistentVolumeClaim]);
      }
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {String} display_name
   */
  exports.prototype['display_name'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/Project.EnvironmentTypeEnum} environment_type
   */
  exports.prototype['environment_type'] = undefined;
  /**
   * @member {Array.<module:model/Application>} apps
   */
  exports.prototype['apps'] = undefined;
  /**
   * @member {Array.<module:model/GroupRoleMapping>} group_to_role
   */
  exports.prototype['group_to_role'] = undefined;
  /**
   * @member {Array.<module:model/RoleMapping>} user_to_role
   */
  exports.prototype['user_to_role'] = undefined;
  /**
   * @member {Array.<module:model/PersistentVolumeClaim>} persistent_volume_claims
   */
  exports.prototype['persistent_volume_claims'] = undefined;


  /**
   * Allowed values for the <code>environment_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EnvironmentTypeEnum = {
    /**
     * value: "build"
     * @const
     */
    "build": "build",
    /**
     * value: "promotion"
     * @const
     */
    "promotion": "promotion"  };


  return exports;
}));


