/**
 * Red Hat Open Innovation Labs API
 * A generic model to support automation at all levels of the application and infrastructure lifecycle.
 *
 * OpenAPI spec version: 0.3.0-alpha
 * Contact: rhc-open-innovation-labs@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Application', 'model/ClaimType', 'model/Customer', 'model/EdgeRoute', 'model/Engagement', 'model/ErrorModel', 'model/Group', 'model/GroupRoleMapping', 'model/LabelSelector', 'model/OpenShiftCluster', 'model/OpenShiftResources', 'model/PVCAssociation', 'model/PassthroughRoute', 'model/PersistentVolume', 'model/PersistentVolumeClaim', 'model/Port', 'model/Project', 'model/ReencryptRoute', 'model/Role', 'model/RoleMapping', 'model/Route', 'model/Service', 'model/User', 'api/EngagementApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Application'), require('./model/ClaimType'), require('./model/Customer'), require('./model/EdgeRoute'), require('./model/Engagement'), require('./model/ErrorModel'), require('./model/Group'), require('./model/GroupRoleMapping'), require('./model/LabelSelector'), require('./model/OpenShiftCluster'), require('./model/OpenShiftResources'), require('./model/PVCAssociation'), require('./model/PassthroughRoute'), require('./model/PersistentVolume'), require('./model/PersistentVolumeClaim'), require('./model/Port'), require('./model/Project'), require('./model/ReencryptRoute'), require('./model/Role'), require('./model/RoleMapping'), require('./model/Route'), require('./model/Service'), require('./model/User'), require('./api/EngagementApi'));
  }
}(function(ApiClient, Application, ClaimType, Customer, EdgeRoute, Engagement, ErrorModel, Group, GroupRoleMapping, LabelSelector, OpenShiftCluster, OpenShiftResources, PVCAssociation, PassthroughRoute, PersistentVolume, PersistentVolumeClaim, Port, Project, ReencryptRoute, Role, RoleMapping, Route, Service, User, EngagementApi) {
  'use strict';

  /**
   * A_generic_model_to_support_automation_at_all_levels_of_the_application_and_infrastructure_lifecycle_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var RedHatOpenInnovationLabsApi = require('index'); // See note below*.
   * var xxxSvc = new RedHatOpenInnovationLabsApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new RedHatOpenInnovationLabsApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new RedHatOpenInnovationLabsApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new RedHatOpenInnovationLabsApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.3.0-alpha
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Application model constructor.
     * @property {module:model/Application}
     */
    Application: Application,
    /**
     * The ClaimType model constructor.
     * @property {module:model/ClaimType}
     */
    ClaimType: ClaimType,
    /**
     * The Customer model constructor.
     * @property {module:model/Customer}
     */
    Customer: Customer,
    /**
     * The EdgeRoute model constructor.
     * @property {module:model/EdgeRoute}
     */
    EdgeRoute: EdgeRoute,
    /**
     * The Engagement model constructor.
     * @property {module:model/Engagement}
     */
    Engagement: Engagement,
    /**
     * The ErrorModel model constructor.
     * @property {module:model/ErrorModel}
     */
    ErrorModel: ErrorModel,
    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group: Group,
    /**
     * The GroupRoleMapping model constructor.
     * @property {module:model/GroupRoleMapping}
     */
    GroupRoleMapping: GroupRoleMapping,
    /**
     * The LabelSelector model constructor.
     * @property {module:model/LabelSelector}
     */
    LabelSelector: LabelSelector,
    /**
     * The OpenShiftCluster model constructor.
     * @property {module:model/OpenShiftCluster}
     */
    OpenShiftCluster: OpenShiftCluster,
    /**
     * The OpenShiftResources model constructor.
     * @property {module:model/OpenShiftResources}
     */
    OpenShiftResources: OpenShiftResources,
    /**
     * The PVCAssociation model constructor.
     * @property {module:model/PVCAssociation}
     */
    PVCAssociation: PVCAssociation,
    /**
     * The PassthroughRoute model constructor.
     * @property {module:model/PassthroughRoute}
     */
    PassthroughRoute: PassthroughRoute,
    /**
     * The PersistentVolume model constructor.
     * @property {module:model/PersistentVolume}
     */
    PersistentVolume: PersistentVolume,
    /**
     * The PersistentVolumeClaim model constructor.
     * @property {module:model/PersistentVolumeClaim}
     */
    PersistentVolumeClaim: PersistentVolumeClaim,
    /**
     * The Port model constructor.
     * @property {module:model/Port}
     */
    Port: Port,
    /**
     * The Project model constructor.
     * @property {module:model/Project}
     */
    Project: Project,
    /**
     * The ReencryptRoute model constructor.
     * @property {module:model/ReencryptRoute}
     */
    ReencryptRoute: ReencryptRoute,
    /**
     * The Role model constructor.
     * @property {module:model/Role}
     */
    Role: Role,
    /**
     * The RoleMapping model constructor.
     * @property {module:model/RoleMapping}
     */
    RoleMapping: RoleMapping,
    /**
     * The Route model constructor.
     * @property {module:model/Route}
     */
    Route: Route,
    /**
     * The Service model constructor.
     * @property {module:model/Service}
     */
    Service: Service,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The EngagementApi service constructor.
     * @property {module:api/EngagementApi}
     */
    EngagementApi: EngagementApi
  };

  return exports;
}));